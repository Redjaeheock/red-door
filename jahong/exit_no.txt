<쉘 종료값>

0 = 커맨드 및 ctrl d 또는 실행한 실행 파일의 정상 종료료(명령어의 성공적 종료)

1 = 파일 읽어오기 실패시

2 = syntax error(| , <, >, &) (오퍼레이터로 cmd_line 시작)

126 = 실행 파일은 존재하지만 실행할 수 없음 (권한 문제 등)

127 = command not found

130 = ctrl c 종료시

131 = ctrl \ 종료시


<<< + string = 에러가 아니다 (bash 환경에 따라 달라지는 것으로 보임)


red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ |
bash: syntax error near unexpected token `|'
red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ ||
bash: syntax error near unexpected token `||'
red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ |||
bash: syntax error near unexpected token `||'
red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ ||||||
bash: syntax error near unexpected token `||'
red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ ||||||||
bash: syntax error near unexpected token `||'
red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ &
bash: syntax error near unexpected token `&'
red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ &&
bash: syntax error near unexpected token `&&'
red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ &&&&&&
bash: syntax error near unexpected token `&&'
red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ &&&&&&&
bash: syntax error near unexpected token `&&'

red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ <<<
bash: syntax error near unexpected token `newline' (내 컴퓨터 환경)
bash: syntax error near unexpected token `<<' (클러스터 환경)

red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ >>>
bash: syntax error near unexpected token `>' (내 컴퓨터 환경)
bash: syntax error near unexpected token `>>' (클러스터 환경)

red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ >>>>
bash: syntax error near unexpected token `>>'
red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ >>>>>>>
bash: syntax error near unexpected token `>>'

red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ <<<<
bash: syntax error near unexpected token `<' (내 컴퓨터 환경)
bash: syntax error near unexpected token `<<' (클러스터 환경)

red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ <<<<<
bash: syntax error near unexpected token `<<'

red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ <<<<<<
bash: syntax error near unexpected token `<<<' (내 컴퓨터 환경)
bash: syntax error near unexpected token `<<' (클러스터 환경경)

red_h@LAPTOP-2E1IM6UM:~/github/red-door/jahong$ <<<<<<<<
bash: syntax error near unexpected token `<<<' (내 컴퓨터 환경)
bash: syntax error near unexpected token `<<' (클러스터 환경)


--------------------------------------------------

$_ -> 명령어의 마지막 인수를 저장

현재 내 컴퓨터 환경

< 명령어는 "" 로 갱신신

| 라인으로는 $_ 이 갱신되지 않음

터미널에 $_ 입력시 저장된 인수가 명령어로 인식

저장된 인수가 alias 설정됐을 경우 alias 의 인수로 설정됨



"$HOME<" 와 $HOME< 동작은 다르다 (후자는 syntax 에러 처리된다.)

나아기 "$HOME" 은 실행 명령 파일을 찾으려 하고,

'$HOME' 은 해당 문자가 명령어인지를 확인하려 한다.

"$HOME*" , "HOME****" 은 * 가 문자열 취급된다

$HOME* , $HOME***** 은 모든 *들이 하나의 널문자 취급된다

$HOME * , $HOME ***** 은 하나의 와일드 카드로 인식되서 처리된다.

$HOME * * * ... 은 각각이 와일드 카드로 인식되서 처리된다.

---------------------------------------------------

< "$1" => null 문자로 치환되나 파일 서칭이 가능 ("" 느낌으로 no search directory or file)
< $1   => null 문자로 치환되어 리다이렉션 자체가 고장 (NULL 느낌으로 bash: $1: ambiguous redirect)

--------------------------------------------------

명령어와 heredoc 이 동시에 있을 경우 heredoc 우선 입력 받아 임시 버퍼에 저장된 후 이 후 명령어 실행

red_h@LAPTOP-2E1IM6UM:~$ file < $1 << o > file2
> $***$1$HOME
> o
bash: $1: ambiguous redirect

red_h@LAPTOP-2E1IM6UM:~$ cat << o > file2
> $****
> o
red_h@LAPTOP-2E1IM6UM:~$ cat file2
***
red_h@LAPTOP-2E1IM6UM:~$ cat << o > file2
> $1
> o
red_h@LAPTOP-2E1IM6UM:~$ cat file2

-----------------------------------------------------
red_h@LAPTOP-2E1IM6UM:~$ cat file2
testtesttest
red_h@LAPTOP-2E1IM6UM:~$ cat | << o > file2
> hello word
> o
o
red_h@LAPTOP-2E1IM6UM:~$ cat file2
red_h@LAPTOP-2E1IM6UM:~$
------------------------------------------------------
위 같은 경우 히어독 입력이 우선적으로 받고, fd 처리 할 곳 이 없어 종료되며
그 다음 cat 의 입력을 받지만 파이프의 출력이 닫혀 있기 때문에 하나의 스트링을 받고 종료됨
?? 그런데 왜 file2 의 내용은 지워졌는가?
